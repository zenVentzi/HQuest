nippet	Renders
imr	Import React
imrc	Import React / Component
impt	Import PropTypes
impc	Import React / PureComponent
cc	Class Component
ccc	Class Component With Constructor
sfc	Stateless Function Component
cdm	componentDidMount
cwm	componentWillMount
cwrp	componentWillReceiveProps
gds	getDerivedStateFromProps
scu	shouldComponentUpdate
cwu	componentWillUpdate
cdu	componentDidUpdate
cwu	componentWillUpdate
cdc	componentDidCatch
gsbu	getSnapshotBeforeUpdate
ss	setState
ssf	Functional setState
ren	render
rprop	Render Prop
hoc	Higher Order Component

imsc	import styled from 'styled-components';
sc	const ${1} = styled.${2} / Styled-Component
exsc	export const ${1} = styled.${2} / Export styled-component
scc	const Styled${1} = styled(${1}) / Styled-Component from existing component
exscc	export const Styled${1} = styled(${1}) / Export styled-component from existing component
scext	const Extended${1} = ${1}.extends / Styled-Component extends
exscext	export const Extended${1} = ${1}.extends / Export styled-component extends
scf	Add both 'imsc' and 'sc' to a new styles.js file
scattrs	const ${1} = styled.${2}.attrs({ ${3}: ${4} })${5} / Styled-Component with attributes
exscattrs	export const ${1} = styled.${2}.attrs({ ${3}: ${4} })${5} 

scp	${props => props.${1}}; / Use props inside styled-component
scpt	${({ theme }) => theme.${1}}; / Use props.theme inside styled-component

inr	innerRef={x => this.${1} = x} / shorthand
innerRef	innerRef={x => this.${1} = x} / longhand
injectGlobal	injectGlobal / Create injectGlobal var
ThemeProvider	<ThemeProvider theme={${1}}> ${2} </ThemeProvider>
sct	const theme = { ${1}: '${2}' } / Create styled-component theme object
