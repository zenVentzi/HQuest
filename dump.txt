<Query query={GET_USER} variables={{ id: props.userId }}>
          {({ loading, error, data }) => {
            if (loading) return <div> loading </div>;
            // const fullName = `${data.user.firstName} ${data.user.surName}`;

            return (
              <Fragment>
                <Avatar />
                <StyledUserName>
                  <p> aaaafdfdfdf </p>
                  {/* {fullName} */}fdfdf
                </StyledUserName>
                <Search
                  placeholder="Search questions.."
                  onChange={() => {
                    const test = 5;
                  }}
                />
                <ToggleQuestions onClick={onToggleQuestions} />
                <QuestionsView userId={props.userId} answered />
              </Fragment>
            );
          }}
        </Query>

return (
      <StyledQuestionsContainer>
        <Query query={GET_QUESTIONS} variables={vars}>
          {({ loading, error, data: { questions } }) => {
            if (loading) return <div> loading </div>;
            if (error) return <div> {error} </div>;

            console.log(fadeUnansweredIn);

            if (this.props.answered) {
              if (this.state.UAQsVisible) {
                return (
                  <UnansweredQuestions
                    questions={questions}
                    fadeIn={fadeUnansweredIn}
                    onDidFade={this.onDidFade}
                  />
                );
              }
            }

            /* 
            Case1) answered=true & UAQsVisible=false means fade in AnsweredQuestions
             */

            const res = this.props.answered ? (
              <AnsweredQuestions
                questions={questions}
                fadeIn={fadeAnsweredIn}
                onDidFade={this.onDidFade}
              />
            ) : (
              <UnansweredQuestions
                questions={questions}
                fadeIn={fadeUnansweredIn}
                onDidFade={this.onDidFade}
              />
            );

            return res;
          }}
        </Query>
      </StyledQuestionsContainer>
    );


componentDidMount () {
    const elm = this.refs.button
    elm.addEventListener('animationend', this.fadingDone)
  }
  componentWillUnmount () {
    const elm = this.refs.button
    elm.removeEventListener('animationend', this.fadingDone)
  }

  // toggleVisible = () => {
  //   this.setState(prevState => ({
  //     AnsweredVisible: !prevState.AnsweredVisible,
  //     UnansweredVisible: !prevState.UnansweredVisible,
  //   }));
  // };